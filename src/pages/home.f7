<template>
  <div class="page" data-name="home">
    <!-- Top Navbar -->
    <div class="navbar navbar-transparent">
      <div class="navbar-bg"></div>
      <div class="navbar-inner padding-top">
        <div class="left padding-left">
          <div class="title-text fw-semibold fs-7">Fraim</div>
        </div>
        <div class="right">
          <a href="/settings/" class="link icon-only" >
            <i class="icon f7-icons if-not-md">gear_alt_fill</i>
            <i class="icon material-icons md-only">settings</i>
          </a>
        </div>
      </div>
    </div>

    <div class="fab fab-right-bottom padding-bottom">
      <a href="#" >
        <i class="icon f7-icons if-not-md">plus</i>
        <i class="icon f7-icons if-not-md">xmark</i>
        <i class="icon material-icons md-only">add</i>
        <i class="icon material-icons md-only">close</i>
      </a>
      <div class="fab-buttons fab-buttons-top">
        <a class="fab-label-button" href="#" id="camera-button" @click=${openCamera}>
          <span>
            <i class="icon f7-icons if-not-md">camera_fill</i>
            <i class="icon material-icons md-only">photo_camera</i>
          </span>
          <span class="fab-label">Take a Picture</span>
        </a>
      </div>
    </div>
    <!-- Scrollable page content-->
    <div class="page-content ptr-content" @ptr:refresh=${onRefresh}>
      <div class="ptr-preloader">
        <div class="preloader"></div>
        <div class="ptr-arrow"></div>
      </div>
      ${images.length > 0 && $h`
        <div class="block-title no-margin-bottom"> ${images.length > 1 ? `${images.length} images` : `${images.length} image`}</div>`}
      ${images.length > 0 ? $h`
          <div class="grid-layout display-flex flex-direction-column justify-content-start">
            <div class="row w-100 justify-content-start">
              ${images.map((image, index) => {
                return $h`<${ImageListIndex} image=${image} index=${index}/>`
              })}
            </div>
          </div>
      ` : $h`<div class="image-text-fallback fs-6 fw-medium"> No images available</div>`}
    </div>
  </div>
</template>
  <style>
    .image-text-fallback {
      color: rgba(0, 0, 0, 0.18); 
      width: 100%; 
      height: 100vw; 
      display: flex; 
      align-items: center; 
      justify-content: center; 
      padding-top: 1rem;
    }
    body.dark .image-text-fallback {
      color: rgba(var(--f7-text-color), 0.18); 
      width: 100%; 
      height: 100vw; 
      display: flex; 
      align-items: center; 
      justify-content: center; 
      padding-top: 1rem;
    }
    .col {
        padding: 1rem;
    }
    .grid-layout {
        --f7-grid-row-gap: 2rem;
        padding: 0.75rem;
    }
</style>
<script>
import ImageListIndex from '@/components/image_list_index.f7'
export default (props, { $, $f7, $store, $on, $update }) => {
  const openCamera = () => {
    $f7.fab.close()
    if (Camera) {
      var opt = { quality: 100, destinationType: Camera.DestinationType.FILE_URI }
      let onError = () => { console.log('Photo not taken') }
      let onSuccess = (metadata) => {
        console.log(metadata)
        resolveLocalFileSystemURL(metadata, (entry) => {
          var img = entry.toURL()
          console.log(img)
          $store.dispatch('addMediaFile', { path: img })
        }, onError)
      }
      navigator.camera.getPicture(onSuccess, onError, opt)
    }
  }
  var files = {value: []}
  var images = []
  var size = 0
  $on('pageInit', () => {
    files = $store.getters.mediaFiles
    images = files.value
    files.onUpdated((imgs) => {
        images = imgs
        size = $('.resizable > img').length
    })
    size = $('.resizable > img').length
    $update()
  })
  const onRefresh = (e, done) => {
    setTimeout(() => {
      files = $store.getters.mediaFiles
      images = files.value
      files.onUpdated((imgs) => {
        images = imgs
        size = $('.resizable > img').length
      })
      size = $('.resizable > img').length
      $update()
      done()
    }, 2500)
  }
  return $render;
}
</script>